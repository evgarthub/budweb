type About {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  image: UploadFile
  title: String
  subtitle: String
  description: String
  order: Int
  contacts(sort: String, limit: Int, start: Int, where: JSON): [Contact]
  navlinks(sort: String, limit: Int, start: Int, where: JSON): [Navlink]
}

input AboutInput {
  image: ID
  title: String
  subtitle: String
  description: String
  contacts: [ID]
  navlinks: [ID]
  order: Int
}

type Appartment {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  number: Int!
  section: Int!
  floor: Int!
  space: Float!
  rooms: Int
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

input AppartmentInput {
  number: Int!
  section: Int!
  floor: Int!
  users: [ID]
  space: Float!
  rooms: Int
}

type Blog {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  intro: String
  text: String!
  image: UploadFile
  isPublished: Boolean
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  navlinks(sort: String, limit: Int, start: Int, where: JSON): [Navlink]
}

input BlogInput {
  title: String!
  intro: String
  text: String!
  image: ID
  categories: [ID]
  navlinks: [ID]
  isPublished: Boolean
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  color: String
  blogs(sort: String, limit: Int, start: Int, where: JSON): [Blog]
}

input CategoryInput {
  name: String!
  blogs: [ID]
  color: String
}

type Comment {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text: String
  user: UsersPermissionsUser
  request: Request
}

input CommentInput {
  text: String
  user: ID
  request: ID
}

type Contact {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  description: String!
  data: String
  type: String!
  about: About
}

input ContactInput {
  description: String!
  data: String
  type: String!
  about: ID
}

input createAboutInput {
  data: AboutInput
}

type createAboutPayload {
  about: About
}

input createAppartmentInput {
  data: AppartmentInput
}

type createAppartmentPayload {
  appartment: Appartment
}

input createBlogInput {
  data: BlogInput
}

type createBlogPayload {
  blog: Blog
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createCommentInput {
  data: CommentInput
}

type createCommentPayload {
  comment: Comment
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contact
}

input createFooterInput {
  data: FooterInput
}

type createFooterPayload {
  footer: Footer
}

input createNavgroupInput {
  data: NavgroupInput
}

type createNavgroupPayload {
  navgroup: Navgroup
}

input createNavigationInput {
  data: NavigationInput
}

type createNavigationPayload {
  navigation: Navigation
}

input createNavlinkInput {
  data: NavlinkInput
}

type createNavlinkPayload {
  navlink: Navlink
}

input createRequestInput {
  data: RequestInput
}

type createRequestPayload {
  request: Request
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSiteconfigInput {
  data: SiteconfigInput
}

type createSiteconfigPayload {
  siteconfig: Siteconfig
}

input createStatusInput {
  data: StatusInput
}

type createStatusPayload {
  status: Status
}

input createTariffInput {
  data: TariffInput
}

type createTariffPayload {
  tariff: Tariff
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAboutInput {
  where: InputID
}

type deleteAboutPayload {
  about: About
}

input deleteAppartmentInput {
  where: InputID
}

type deleteAppartmentPayload {
  appartment: Appartment
}

input deleteBlogInput {
  where: InputID
}

type deleteBlogPayload {
  blog: Blog
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteCommentInput {
  where: InputID
}

type deleteCommentPayload {
  comment: Comment
}

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contact
}

input deleteFooterInput {
  where: InputID
}

type deleteFooterPayload {
  footer: Footer
}

input deleteNavgroupInput {
  where: InputID
}

type deleteNavgroupPayload {
  navgroup: Navgroup
}

input deleteNavigationInput {
  where: InputID
}

type deleteNavigationPayload {
  navigation: Navigation
}

input deleteNavlinkInput {
  where: InputID
}

type deleteNavlinkPayload {
  navlink: Navlink
}

input deleteRequestInput {
  where: InputID
}

type deleteRequestPayload {
  request: Request
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSiteconfigInput {
  where: InputID
}

type deleteSiteconfigPayload {
  siteconfig: Siteconfig
}

input deleteStatusInput {
  where: InputID
}

type deleteStatusPayload {
  status: Status
}

input deleteTariffInput {
  where: InputID
}

type deleteTariffPayload {
  tariff: Tariff
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutInput {
  image: ID
  title: String
  subtitle: String
  description: String
  contacts: [ID]
  navlinks: [ID]
  order: Int
}

input editAppartmentInput {
  number: Int
  section: Int
  floor: Int
  users: [ID]
  space: Float
  rooms: Int
}

input editBlogInput {
  title: String
  intro: String
  text: String
  image: ID
  categories: [ID]
  navlinks: [ID]
  isPublished: Boolean
}

input editCategoryInput {
  name: String
  blogs: [ID]
  color: String
}

input editCommentInput {
  text: String
  user: ID
  request: ID
}

input editContactInput {
  description: String
  data: String
  type: String
  about: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editFooterInput {
  About: String
  navlinks: [ID]
}

input editNavgroupInput {
  Title: String
  navigation: ID
  navlinks: [ID]
}

input editNavigationInput {
  Home: String
  navgroups: [ID]
  navlinks: [ID]
}

input editNavlinkInput {
  Title: String
  Link: String
  Logo: ENUM_NAVLINK_LOGO
  navigation: ID
  navgroup: ID
  footer: ID
  blog: ID
  about: ID
}

input editRequestInput {
  description: String
  status: ID
  user: ID
  comments: [ID]
  quality: Int
  speed: Int
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSiteconfigInput {
  footerid: Int
  navigationid: Int
  gmapurl: String
}

input editStatusInput {
  value: String
  label: String
  color: String
  requests: [ID]
}

input editTariffInput {
  name: String
  value: Float
  unit: String
  validFrom: DateTime
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  phone: String
  appartment: ID
  comments: [ID]
  requests: [ID]
}

enum ENUM_NAVLINK_LOGO {
  empty
  email
  phone
  account
  blog
  home
  facebook
  telegram
  viber
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Footer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  About: String
  navlinks(sort: String, limit: Int, start: Int, where: JSON): [Navlink]
}

input FooterInput {
  About: String
  navlinks: [ID]
}

input InputID {
  id: ID!
}

scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | About | createAboutPayload | updateAboutPayload | deleteAboutPayload | Appartment | createAppartmentPayload | updateAppartmentPayload | deleteAppartmentPayload | Blog | createBlogPayload | updateBlogPayload | deleteBlogPayload | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Comment | createCommentPayload | updateCommentPayload | deleteCommentPayload | Contact | createContactPayload | updateContactPayload | deleteContactPayload | Footer | createFooterPayload | updateFooterPayload | deleteFooterPayload | Navgroup | createNavgroupPayload | updateNavgroupPayload | deleteNavgroupPayload | Navigation | createNavigationPayload | updateNavigationPayload | deleteNavigationPayload | Navlink | createNavlinkPayload | updateNavlinkPayload | deleteNavlinkPayload | Request | createRequestPayload | updateRequestPayload | deleteRequestPayload | Siteconfig | createSiteconfigPayload | updateSiteconfigPayload | deleteSiteconfigPayload | Status | createStatusPayload | updateStatusPayload | deleteStatusPayload | Tariff | createTariffPayload | updateTariffPayload | deleteTariffPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAbout(input: createAboutInput): createAboutPayload
  updateAbout(input: updateAboutInput): updateAboutPayload
  deleteAbout(input: deleteAboutInput): deleteAboutPayload
  createAppartment(input: createAppartmentInput): createAppartmentPayload
  updateAppartment(input: updateAppartmentInput): updateAppartmentPayload
  deleteAppartment(input: deleteAppartmentInput): deleteAppartmentPayload
  createBlog(input: createBlogInput): createBlogPayload
  updateBlog(input: updateBlogInput): updateBlogPayload
  deleteBlog(input: deleteBlogInput): deleteBlogPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createComment(input: createCommentInput): createCommentPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  createFooter(input: createFooterInput): createFooterPayload
  updateFooter(input: updateFooterInput): updateFooterPayload
  deleteFooter(input: deleteFooterInput): deleteFooterPayload
  createNavgroup(input: createNavgroupInput): createNavgroupPayload
  updateNavgroup(input: updateNavgroupInput): updateNavgroupPayload
  deleteNavgroup(input: deleteNavgroupInput): deleteNavgroupPayload
  createNavigation(input: createNavigationInput): createNavigationPayload
  updateNavigation(input: updateNavigationInput): updateNavigationPayload
  deleteNavigation(input: deleteNavigationInput): deleteNavigationPayload
  createNavlink(input: createNavlinkInput): createNavlinkPayload
  updateNavlink(input: updateNavlinkInput): updateNavlinkPayload
  deleteNavlink(input: deleteNavlinkInput): deleteNavlinkPayload
  createRequest(input: createRequestInput): createRequestPayload
  updateRequest(input: updateRequestInput): updateRequestPayload
  deleteRequest(input: deleteRequestInput): deleteRequestPayload
  createSiteconfig(input: createSiteconfigInput): createSiteconfigPayload
  updateSiteconfig(input: updateSiteconfigInput): updateSiteconfigPayload
  deleteSiteconfig(input: deleteSiteconfigInput): deleteSiteconfigPayload
  createStatus(input: createStatusInput): createStatusPayload
  updateStatus(input: updateStatusInput): updateStatusPayload
  deleteStatus(input: deleteStatusInput): deleteStatusPayload
  createTariff(input: createTariffInput): createTariffPayload
  updateTariff(input: updateTariffInput): updateTariffPayload
  deleteTariff(input: deleteTariffInput): deleteTariffPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Navgroup {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  navigation: Navigation
  navlinks(sort: String, limit: Int, start: Int, where: JSON): [Navlink]
}

input NavgroupInput {
  Title: String
  navigation: ID
  navlinks: [ID]
}

type Navigation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Home: String
  navgroups(sort: String, limit: Int, start: Int, where: JSON): [Navgroup]
  navlinks(sort: String, limit: Int, start: Int, where: JSON): [Navlink]
}

input NavigationInput {
  Home: String
  navgroups: [ID]
  navlinks: [ID]
}

type Navlink {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Link: String
  Logo: ENUM_NAVLINK_LOGO
  navigation: Navigation
  navgroup: Navgroup
  footer: Footer
  blog: Blog
  about: About
}

input NavlinkInput {
  Title: String
  Link: String
  Logo: ENUM_NAVLINK_LOGO
  navigation: ID
  navgroup: ID
  footer: ID
  blog: ID
  about: ID
}

type Query {
  about(id: ID!): About
  abouts(sort: String, limit: Int, start: Int, where: JSON): [About]
  appartment(id: ID!): Appartment
  appartments(sort: String, limit: Int, start: Int, where: JSON): [Appartment]
  blog(id: ID!): Blog
  blogs(sort: String, limit: Int, start: Int, where: JSON): [Blog]
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  comment(id: ID!): Comment
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  contact(id: ID!): Contact
  contacts(sort: String, limit: Int, start: Int, where: JSON): [Contact]
  footer(id: ID!): Footer
  footers(sort: String, limit: Int, start: Int, where: JSON): [Footer]
  navgroup(id: ID!): Navgroup
  navgroups(sort: String, limit: Int, start: Int, where: JSON): [Navgroup]
  navigation(id: ID!): Navigation
  navigations(sort: String, limit: Int, start: Int, where: JSON): [Navigation]
  navlink(id: ID!): Navlink
  navlinks(sort: String, limit: Int, start: Int, where: JSON): [Navlink]
  request(id: ID!): Request
  requests(sort: String, limit: Int, start: Int, where: JSON): [Request]
  siteconfig(id: ID!): Siteconfig
  siteconfigs(sort: String, limit: Int, start: Int, where: JSON): [Siteconfig]
  status(id: ID!): Status
  statuses(sort: String, limit: Int, start: Int, where: JSON): [Status]
  tariff(id: ID!): Tariff
  tariffs(sort: String, limit: Int, start: Int, where: JSON): [Tariff]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Request {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  description: String
  status: Status
  user: UsersPermissionsUser
  quality: Int
  speed: Int
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
}

input RequestInput {
  description: String
  status: ID
  user: ID
  comments: [ID]
  quality: Int
  speed: Int
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Siteconfig {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  footerid: Int
  navigationid: Int
  gmapurl: String
}

input SiteconfigInput {
  footerid: Int
  navigationid: Int
  gmapurl: String
}

type Status {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  value: String!
  label: String
  color: String
  requests(sort: String, limit: Int, start: Int, where: JSON): [Request]
}

input StatusInput {
  value: String!
  label: String
  color: String
  requests: [ID]
}

type Tariff {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  value: Float
  unit: String
  validFrom: DateTime
}

input TariffInput {
  name: String
  value: Float
  unit: String
  validFrom: DateTime
}

input updateAboutInput {
  where: InputID
  data: editAboutInput
}

type updateAboutPayload {
  about: About
}

input updateAppartmentInput {
  where: InputID
  data: editAppartmentInput
}

type updateAppartmentPayload {
  appartment: Appartment
}

input updateBlogInput {
  where: InputID
  data: editBlogInput
}

type updateBlogPayload {
  blog: Blog
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateCommentInput {
  where: InputID
  data: editCommentInput
}

type updateCommentPayload {
  comment: Comment
}

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

input updateFooterInput {
  where: InputID
  data: editFooterInput
}

type updateFooterPayload {
  footer: Footer
}

input updateNavgroupInput {
  where: InputID
  data: editNavgroupInput
}

type updateNavgroupPayload {
  navgroup: Navgroup
}

input updateNavigationInput {
  where: InputID
  data: editNavigationInput
}

type updateNavigationPayload {
  navigation: Navigation
}

input updateNavlinkInput {
  where: InputID
  data: editNavlinkInput
}

type updateNavlinkPayload {
  navlink: Navlink
}

input updateRequestInput {
  where: InputID
  data: editRequestInput
}

type updateRequestPayload {
  request: Request
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSiteconfigInput {
  where: InputID
  data: editSiteconfigInput
}

type updateSiteconfigPayload {
  siteconfig: Siteconfig
}

input updateStatusInput {
  where: InputID
  data: editStatusInput
}

type updateStatusPayload {
  status: Status
}

input updateTariffInput {
  where: InputID
  data: editTariffInput
}

type updateTariffPayload {
  tariff: Tariff
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  phone: String
  appartment: ID
  comments: [ID]
  requests: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  phone: String
  appartment: Appartment
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  requests(sort: String, limit: Int, start: Int, where: JSON): [Request]
}
